{"ast":null,"code":"// src/index.ts\nfunction isSearchkit(config) {\n  return config.handleInstantSearchRequests !== void 0;\n}\nvar InstantSearchElasticsearchAdapter = class {\n  constructor(config, requestOptions) {\n    this.config = config;\n    this.requestOptions = requestOptions;\n    this.cache = {};\n    this.transporter = {\n      headers: {},\n      queryParameters: {}\n    };\n    if (!isSearchkit(this.config) && !this.config.url) {\n      throw new Error(\"Searchkit Instantsearch Client: url is required\");\n    }\n    if (!isSearchkit(this.config) && this.requestOptions) {\n      throw new Error(\"Searchkit Instantsearch Client: requestOptions is not supported when used with url. Add the request options to @searchkit/api instead.\");\n    }\n  }\n  clearCache() {\n    this.cache = {};\n    return Promise.resolve(void 0);\n  }\n  getHeaders() {\n    let headers = {};\n    if (!isSearchkit(this.config) && this.config.headers) {\n      headers = typeof this.config.headers === \"function\" ? this.config.headers() : this.config.headers;\n    }\n    return headers;\n  }\n  async search(instantsearchRequests) {\n    try {\n      const key = JSON.stringify(instantsearchRequests);\n      if (this.cache[key]) {\n        return this.cache[key];\n      }\n      if (isSearchkit(this.config)) {\n        const results2 = await this.config.handleInstantSearchRequests(instantsearchRequests, this.requestOptions);\n        this.cache[key] = results2;\n        return results2;\n      }\n      const response = await fetch(this.config.url, {\n        body: JSON.stringify(instantsearchRequests),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...this.getHeaders()\n        },\n        method: \"POST\"\n      });\n      const results = await response.json();\n      this.cache[key] = results;\n      return results;\n    } catch (e) {\n      console.error(e);\n      return [];\n    }\n  }\n  async searchForFacetValues(instantsearchRequests) {\n    const isr = instantsearchRequests.map(request => {\n      return {\n        ...request,\n        params: {\n          ...request.params,\n          hitsPerPage: 0\n        }\n      };\n    });\n    try {\n      if (isSearchkit(this.config)) {\n        const results2 = await this.config.handleInstantSearchRequests(isr);\n        return results2.results;\n      }\n      const response = await fetch(this.config.url, {\n        body: JSON.stringify(isr),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...this.getHeaders()\n        },\n        method: \"POST\"\n      });\n      const results = await response.json();\n      return results.results;\n    } catch (e) {\n      console.error(e);\n      return [];\n    }\n  }\n};\nvar createClient = (config, requestOptions) => new InstantSearchElasticsearchAdapter(config, requestOptions);\nvar src_default = createClient;\nexport { src_default as default };","map":{"version":3,"names":["isSearchkit","config","handleInstantSearchRequests","InstantSearchElasticsearchAdapter","constructor","requestOptions","cache","transporter","headers","queryParameters","url","Error","clearCache","Promise","resolve","getHeaders","search","instantsearchRequests","key","JSON","stringify","results2","response","fetch","body","method","results","json","e","console","error","searchForFacetValues","isr","map","request","params","hitsPerPage","createClient","src_default"],"sources":["/app/node_modules/@searchkit/instantsearch-client/src/index.ts"],"sourcesContent":["import type { MultipleQueriesQuery, RequestOptions } from 'searchkit'\nimport type Searchkit from 'searchkit'\n\ninterface InstantSearchElasticsearchAdapterConfig {\n  url: string\n  headers?: Record<string, string> | (() => Record<string, string>)\n}\n\ntype Config = InstantSearchElasticsearchAdapterConfig | Searchkit\n\nfunction isSearchkit(config: Config): config is Searchkit {\n  return (config as Searchkit).handleInstantSearchRequests !== undefined\n}\n\nclass InstantSearchElasticsearchAdapter {\n  private cache: Record<string, any> = {}\n  public transporter = {\n    headers: {},\n    queryParameters: {}\n  }\n\n  constructor(private config: Config, private requestOptions?: RequestOptions) {\n    if (!isSearchkit(this.config) && !this.config.url) {\n      throw new Error('Searchkit Instantsearch Client: url is required')\n    }\n    if (!isSearchkit(this.config) && this.requestOptions) {\n      throw new Error(\n        'Searchkit Instantsearch Client: requestOptions is not supported when used with url. Add the request options to @searchkit/api instead.'\n      )\n    }\n  }\n\n  public clearCache(): Promise<void> {\n    this.cache = {}\n    return Promise.resolve(undefined)\n  }\n\n  private getHeaders(): Record<string, string> {\n    let headers = {}\n    if (!isSearchkit(this.config) && this.config.headers) {\n      headers =\n        typeof this.config.headers === 'function' ? this.config.headers() : this.config.headers\n    }\n    return headers\n  }\n\n  public async search(instantsearchRequests: readonly MultipleQueriesQuery[]): Promise<any> {\n    try {\n      const key = JSON.stringify(instantsearchRequests)\n      if (this.cache[key]) {\n        return this.cache[key]\n      }\n\n      if (isSearchkit(this.config)) {\n        const results = await this.config.handleInstantSearchRequests(\n          instantsearchRequests,\n          this.requestOptions\n        )\n        this.cache[key] = results\n        return results\n      }\n\n      const response = await fetch(this.config.url, {\n        body: JSON.stringify(instantsearchRequests),\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.getHeaders()\n        },\n        method: 'POST'\n      })\n\n      const results = await response.json()\n      this.cache[key] = results\n      return results\n    } catch (e) {\n      console.error(e)\n      return []\n    }\n  }\n\n  public async searchForFacetValues(\n    instantsearchRequests: readonly MultipleQueriesQuery[]\n  ): Promise<any> {\n    const isr = instantsearchRequests.map<MultipleQueriesQuery>((request) => {\n      return {\n        ...request,\n        params: {\n          ...request.params,\n          hitsPerPage: 0\n        }\n      }\n    })\n\n    try {\n      if (isSearchkit(this.config)) {\n        const results = await this.config.handleInstantSearchRequests(isr)\n        return results.results\n      }\n\n      const response = await fetch(this.config.url, {\n        body: JSON.stringify(isr),\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.getHeaders()\n        },\n        method: 'POST'\n      })\n\n      const results = await response.json()\n      return results.results\n    } catch (e) {\n      console.error(e)\n      return []\n    }\n  }\n}\n\nconst createClient = (config: Config, requestOptions?: RequestOptions) =>\n  new InstantSearchElasticsearchAdapter(config, requestOptions)\n\nexport default createClient\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}