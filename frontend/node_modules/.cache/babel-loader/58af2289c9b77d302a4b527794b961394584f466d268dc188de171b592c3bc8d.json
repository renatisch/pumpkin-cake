{"ast":null,"code":"import _regeneratorRuntime from \"/Users/renat.ishmukhamedov/Documents/dev_projects/extractor/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/renat.ishmukhamedov/Documents/dev_projects/extractor/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/renat.ishmukhamedov/Documents/dev_projects/extractor/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/renat.ishmukhamedov/Documents/dev_projects/extractor/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/renat.ishmukhamedov/Documents/dev_projects/extractor/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// src/index.ts\nfunction isSearchkit(config) {\n  return config.handleInstantSearchRequests !== void 0;\n}\nvar InstantSearchElasticsearchAdapter = /*#__PURE__*/function () {\n  function InstantSearchElasticsearchAdapter(config, requestOptions) {\n    _classCallCheck(this, InstantSearchElasticsearchAdapter);\n    this.config = config;\n    this.requestOptions = requestOptions;\n    this.cache = {};\n    this.transporter = {\n      headers: {},\n      queryParameters: {}\n    };\n    if (!isSearchkit(this.config) && !this.config.url) {\n      throw new Error(\"Searchkit Instantsearch Client: url is required\");\n    }\n    if (!isSearchkit(this.config) && this.requestOptions) {\n      throw new Error(\"Searchkit Instantsearch Client: requestOptions is not supported when used with url. Add the request options to @searchkit/api instead.\");\n    }\n  }\n  _createClass(InstantSearchElasticsearchAdapter, [{\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.cache = {};\n      return Promise.resolve(void 0);\n    }\n  }, {\n    key: \"getHeaders\",\n    value: function getHeaders() {\n      var headers = {};\n      if (!isSearchkit(this.config) && this.config.headers) {\n        headers = typeof this.config.headers === \"function\" ? this.config.headers() : this.config.headers;\n      }\n      return headers;\n    }\n  }, {\n    key: \"search\",\n    value: function () {\n      var _search = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(instantsearchRequests) {\n        var key, results2, response, results;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              key = JSON.stringify(instantsearchRequests);\n              if (!this.cache[key]) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\", this.cache[key]);\n            case 4:\n              if (!isSearchkit(this.config)) {\n                _context.next = 10;\n                break;\n              }\n              _context.next = 7;\n              return this.config.handleInstantSearchRequests(instantsearchRequests, this.requestOptions);\n            case 7:\n              results2 = _context.sent;\n              this.cache[key] = results2;\n              return _context.abrupt(\"return\", results2);\n            case 10:\n              _context.next = 12;\n              return fetch(this.config.url, {\n                body: JSON.stringify(instantsearchRequests),\n                headers: _objectSpread({\n                  \"Content-Type\": \"application/json\"\n                }, this.getHeaders()),\n                method: \"POST\"\n              });\n            case 12:\n              response = _context.sent;\n              _context.next = 15;\n              return response.json();\n            case 15:\n              results = _context.sent;\n              this.cache[key] = results;\n              return _context.abrupt(\"return\", results);\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n              return _context.abrupt(\"return\", []);\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 20]]);\n      }));\n      function search(_x) {\n        return _search.apply(this, arguments);\n      }\n      return search;\n    }()\n  }, {\n    key: \"searchForFacetValues\",\n    value: function () {\n      var _searchForFacetValues = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(instantsearchRequests) {\n        var isr, results2, response, results;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              isr = instantsearchRequests.map(function (request) {\n                return _objectSpread(_objectSpread({}, request), {}, {\n                  params: _objectSpread(_objectSpread({}, request.params), {}, {\n                    hitsPerPage: 0\n                  })\n                });\n              });\n              _context2.prev = 1;\n              if (!isSearchkit(this.config)) {\n                _context2.next = 7;\n                break;\n              }\n              _context2.next = 5;\n              return this.config.handleInstantSearchRequests(isr);\n            case 5:\n              results2 = _context2.sent;\n              return _context2.abrupt(\"return\", results2.results);\n            case 7:\n              _context2.next = 9;\n              return fetch(this.config.url, {\n                body: JSON.stringify(isr),\n                headers: _objectSpread({\n                  \"Content-Type\": \"application/json\"\n                }, this.getHeaders()),\n                method: \"POST\"\n              });\n            case 9:\n              response = _context2.sent;\n              _context2.next = 12;\n              return response.json();\n            case 12:\n              results = _context2.sent;\n              return _context2.abrupt(\"return\", results.results);\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.error(_context2.t0);\n              return _context2.abrupt(\"return\", []);\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[1, 16]]);\n      }));\n      function searchForFacetValues(_x2) {\n        return _searchForFacetValues.apply(this, arguments);\n      }\n      return searchForFacetValues;\n    }()\n  }]);\n  return InstantSearchElasticsearchAdapter;\n}();\nvar createClient = function createClient(config, requestOptions) {\n  return new InstantSearchElasticsearchAdapter(config, requestOptions);\n};\nvar src_default = createClient;\nexport { src_default as default };","map":{"version":3,"names":["isSearchkit","config","handleInstantSearchRequests","InstantSearchElasticsearchAdapter","requestOptions","_classCallCheck","cache","transporter","headers","queryParameters","url","Error","_createClass","key","value","clearCache","Promise","resolve","getHeaders","_search","_asyncToGenerator","_regeneratorRuntime","mark","_callee","instantsearchRequests","results2","response","results","wrap","_callee$","_context","prev","next","JSON","stringify","abrupt","sent","fetch","body","_objectSpread","method","json","t0","console","error","stop","search","_x","apply","arguments","_searchForFacetValues","_callee2","isr","_callee2$","_context2","map","request","params","hitsPerPage","searchForFacetValues","_x2","createClient","src_default"],"sources":["/Users/renat.ishmukhamedov/Documents/dev_projects/extractor/frontend/node_modules/@searchkit/instantsearch-client/src/index.ts"],"sourcesContent":["import type { MultipleQueriesQuery, RequestOptions } from 'searchkit'\nimport type Searchkit from 'searchkit'\n\ninterface InstantSearchElasticsearchAdapterConfig {\n  url: string\n  headers?: Record<string, string> | (() => Record<string, string>)\n}\n\ntype Config = InstantSearchElasticsearchAdapterConfig | Searchkit\n\nfunction isSearchkit(config: Config): config is Searchkit {\n  return (config as Searchkit).handleInstantSearchRequests !== undefined\n}\n\nclass InstantSearchElasticsearchAdapter {\n  private cache: Record<string, any> = {}\n  public transporter = {\n    headers: {},\n    queryParameters: {}\n  }\n\n  constructor(private config: Config, private requestOptions?: RequestOptions) {\n    if (!isSearchkit(this.config) && !this.config.url) {\n      throw new Error('Searchkit Instantsearch Client: url is required')\n    }\n    if (!isSearchkit(this.config) && this.requestOptions) {\n      throw new Error(\n        'Searchkit Instantsearch Client: requestOptions is not supported when used with url. Add the request options to @searchkit/api instead.'\n      )\n    }\n  }\n\n  public clearCache(): Promise<void> {\n    this.cache = {}\n    return Promise.resolve(undefined)\n  }\n\n  private getHeaders(): Record<string, string> {\n    let headers = {}\n    if (!isSearchkit(this.config) && this.config.headers) {\n      headers =\n        typeof this.config.headers === 'function' ? this.config.headers() : this.config.headers\n    }\n    return headers\n  }\n\n  public async search(instantsearchRequests: readonly MultipleQueriesQuery[]): Promise<any> {\n    try {\n      const key = JSON.stringify(instantsearchRequests)\n      if (this.cache[key]) {\n        return this.cache[key]\n      }\n\n      if (isSearchkit(this.config)) {\n        const results = await this.config.handleInstantSearchRequests(\n          instantsearchRequests,\n          this.requestOptions\n        )\n        this.cache[key] = results\n        return results\n      }\n\n      const response = await fetch(this.config.url, {\n        body: JSON.stringify(instantsearchRequests),\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.getHeaders()\n        },\n        method: 'POST'\n      })\n\n      const results = await response.json()\n      this.cache[key] = results\n      return results\n    } catch (e) {\n      console.error(e)\n      return []\n    }\n  }\n\n  public async searchForFacetValues(\n    instantsearchRequests: readonly MultipleQueriesQuery[]\n  ): Promise<any> {\n    const isr = instantsearchRequests.map<MultipleQueriesQuery>((request) => {\n      return {\n        ...request,\n        params: {\n          ...request.params,\n          hitsPerPage: 0\n        }\n      }\n    })\n\n    try {\n      if (isSearchkit(this.config)) {\n        const results = await this.config.handleInstantSearchRequests(isr)\n        return results.results\n      }\n\n      const response = await fetch(this.config.url, {\n        body: JSON.stringify(isr),\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.getHeaders()\n        },\n        method: 'POST'\n      })\n\n      const results = await response.json()\n      return results.results\n    } catch (e) {\n      console.error(e)\n      return []\n    }\n  }\n}\n\nconst createClient = (config: Config, requestOptions?: RequestOptions) =>\n  new InstantSearchElasticsearchAdapter(config, requestOptions)\n\nexport default createClient\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}