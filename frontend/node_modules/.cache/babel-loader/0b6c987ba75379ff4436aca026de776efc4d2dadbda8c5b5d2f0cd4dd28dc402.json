{"ast":null,"code":"import InstantSearch from \"instantsearch.js/es/lib/InstantSearch.js\";\nimport { useCallback, useRef, version as ReactVersion } from 'react';\nimport { useSyncExternalStore } from \"use-sync-external-store/shim/index.js\";\nimport { useInstantSearchServerContext } from \"./useInstantSearchServerContext.js\";\nimport { useInstantSearchSSRContext } from \"./useInstantSearchSSRContext.js\";\nimport version from \"../version.js\";\nimport { useForceUpdate } from \"./useForceUpdate.js\";\nimport { warn } from \"./warn.js\";\nvar defaultUserAgents = [\"react (\".concat(ReactVersion, \")\"), \"react-instantsearch (\".concat(version, \")\"), \"react-instantsearch-hooks (\".concat(version, \")\")];\nvar serverUserAgent = \"react-instantsearch-server (\".concat(version, \")\");\nvar nextUserAgent = function nextUserAgent(nextVersion) {\n  return nextVersion ? \"next.js (\".concat(nextVersion, \")\") : null;\n};\nexport function useInstantSearchApi(props) {\n  var forceUpdate = useForceUpdate();\n  var serverContext = useInstantSearchServerContext();\n  var serverState = useInstantSearchSSRContext();\n  var initialResults = serverState === null || serverState === void 0 ? void 0 : serverState.initialResults;\n  var prevPropsRef = useRef(props);\n  var searchRef = useRef(null);\n  // As we need to render on mount with SSR, using the local ref above in `StrictMode` will\n  // create and start two instances of InstantSearch. To avoid this, we instead discard it and use\n  // an upward ref from `InstantSearchSSRContext` as it has already been mounted a second time at this point.\n  if (serverState) {\n    searchRef = serverState.ssrSearchRef;\n  }\n  if (searchRef.current === null) {\n    // We don't use the `instantsearch()` function because it comes with other\n    // top-level APIs that we don't need.\n    // See https://github.com/algolia/instantsearch.js/blob/5b529f43d8acc680f85837eaaa41f7fd03a3f833/src/index.es.ts#L63-L86\n    var search = new InstantSearch(props);\n    search._schedule = function _schedule(cb) {\n      search._schedule.queue.push(cb);\n      clearTimeout(search._schedule.timer);\n      search._schedule.timer = setTimeout(function () {\n        search._schedule.queue.forEach(function (callback) {\n          callback();\n        });\n        search._schedule.queue = [];\n      }, 0);\n    };\n    search._schedule.queue = [];\n    if (serverContext || initialResults) {\n      // InstantSearch.js has a private Initial Results API that lets us inject\n      // results on the search instance.\n      // On the server, we default the initial results to an empty object so that\n      // InstantSearch.js doesn't schedule a search that isn't used, leading to\n      // an additional network request. (This is equivalent to monkey-patching\n      // `scheduleSearch` to a noop.)\n      search._initialResults = initialResults || {};\n    }\n    addAlgoliaAgents(props.searchClient, [].concat(defaultUserAgents, [serverContext && serverUserAgent, nextUserAgent(getNextVersion())]));\n\n    // On the server, we start the search early to compute the search parameters.\n    // On SSR, we start the search early to directly catch up with the lifecycle\n    // and render.\n    if (serverContext || initialResults) {\n      search.start();\n    }\n    if (serverContext) {\n      // We notify `getServerState()` of the InstantSearch internals to retrieve\n      // the server state and pass it to the render on SSR.\n      serverContext.notifyServer({\n        search: search\n      });\n    }\n    warnNextRouter(props.routing);\n    searchRef.current = search;\n  }\n  {\n    var _search = searchRef.current;\n    var prevProps = prevPropsRef.current;\n    if (prevProps.indexName !== props.indexName) {\n      _search.helper.setIndex(props.indexName || '').search();\n      prevPropsRef.current = props;\n    }\n    if (prevProps.searchClient !== props.searchClient) {\n      process.env.NODE_ENV === 'development' ? warn(false, 'The `searchClient` prop of `<InstantSearch>` changed between renders, which may cause more search requests than necessary. If this is an unwanted behavior, please provide a stable reference: https://www.algolia.com/doc/api-reference/widgets/instantsearch/react-hooks/#widget-param-searchclient') : void 0;\n      addAlgoliaAgents(props.searchClient, [].concat(defaultUserAgents, [serverContext && serverUserAgent]));\n      _search.mainHelper.setClient(props.searchClient).search();\n      prevPropsRef.current = props;\n    }\n    if (prevProps.onStateChange !== props.onStateChange) {\n      _search.onStateChange = props.onStateChange;\n      prevPropsRef.current = props;\n    }\n    if (prevProps.searchFunction !== props.searchFunction) {\n      // Updating the `searchFunction` to `undefined` is not supported by\n      // InstantSearch.js, so it will throw an error.\n      // This is a fair behavior until we add an update API in InstantSearch.js.\n      _search._searchFunction = props.searchFunction;\n      prevPropsRef.current = props;\n    }\n    if (prevProps.stalledSearchDelay !== props.stalledSearchDelay) {\n      var _props$stalledSearchD;\n      // The default `stalledSearchDelay` in InstantSearch.js is 200ms.\n      // We need to reset it when it's undefined to get back to the original value.\n      _search._stalledSearchDelay = (_props$stalledSearchD = props.stalledSearchDelay) !== null && _props$stalledSearchD !== void 0 ? _props$stalledSearchD : 200;\n      prevPropsRef.current = props;\n    }\n\n    // Updating the `routing` prop is not supported because InstantSearch.js\n    // doesn't let us change it. This might not be a problem though, because `routing`\n    // shouldn't need to be dynamic.\n    // If we find scenarios where `routing` needs to change, we can always expose\n    // it privately on the InstantSearch instance. Another way would be to\n    // manually inject the routing middleware in this library, and not rely\n    // on the provided `routing` prop.\n  }\n\n  var cleanupTimerRef = useRef(null);\n  var store = useSyncExternalStore(useCallback(function () {\n    var search = searchRef.current;\n\n    // Scenario 1: the component mounts.\n    if (cleanupTimerRef.current === null) {\n      // On SSR, the instance is already started so we don't start it again.\n      if (!search.started) {\n        search.start();\n        forceUpdate();\n      }\n    }\n    // Scenario 2: the component updates.\n    else {\n      // We cancel the previous cleanup function because we don't want to\n      // dispose the search during an update.\n      clearTimeout(cleanupTimerRef.current);\n      search._preventWidgetCleanup = false;\n    }\n    return function () {\n      function cleanup() {\n        search.dispose();\n      }\n      clearTimeout(search._schedule.timer);\n      // We clean up only when the component that uses this subscription unmounts,\n      // but not when it updates, because it would dispose the instance, which\n      // would remove all the widgets and break routing.\n      // Executing the cleanup function in a `setTimeout()` lets us cancel it\n      // in the next effect.\n      // (There might be better ways to do this.)\n      cleanupTimerRef.current = setTimeout(cleanup);\n\n      // We need to prevent the `useWidget` cleanup function so that widgets\n      // are not removed before the instance is disposed, triggering\n      // an unwanted search request.\n      search._preventWidgetCleanup = true;\n    };\n  }, [forceUpdate]), function () {\n    return searchRef.current;\n  }, function () {\n    return searchRef.current;\n  });\n  return store;\n}\nfunction addAlgoliaAgents(searchClient, userAgents) {\n  if (typeof searchClient.addAlgoliaAgent !== 'function') {\n    return;\n  }\n  userAgents.filter(Boolean).forEach(function (userAgent) {\n    searchClient.addAlgoliaAgent(userAgent);\n  });\n}\nfunction warnNextRouter(routing) {\n  if (process.env.NODE_ENV === 'development') {\n    var _routing$router;\n    if (!routing || typeof window === 'undefined' || !('__NEXT_DATA__' in window)) {\n      return;\n    }\n    var isUsingNextRouter =\n    // @ts-expect-error: _isNextRouter is only set on the Next.js router\n    routing !== true && (routing === null || routing === void 0 ? void 0 : (_routing$router = routing.router) === null || _routing$router === void 0 ? void 0 : _routing$router._isNextRouter);\n    process.env.NODE_ENV === 'development' ? warn(isUsingNextRouter, \"\\nYou are using Next.js with InstantSearch without the \\\"react-instantsearch-hooks-router-nextjs\\\" package.\\nThis package is recommended to make the routing work correctly with Next.js.\\nPlease check its usage instructions: https://github.com/algolia/instantsearch/tree/master/packages/react-instantsearch-hooks-router-nextjs\\n\\nYou can ignore this warning if you are using a custom router that suits your needs, it won't be outputted in production builds.\") : void 0;\n  }\n}\n\n/**\n * Gets the version of Next.js if it is available in the `window` object,\n * otherwise it returns the NEXT_RUNTIME environment variable (in SSR),\n * which is either `nodejs` or `edge`.\n */\nfunction getNextVersion() {\n  var _next, _process$env;\n  return typeof window !== 'undefined' && ((_next = window.next) === null || _next === void 0 ? void 0 : _next.version) || (typeof process !== 'undefined' ? (_process$env = process.env) === null || _process$env === void 0 ? void 0 : _process$env.NEXT_RUNTIME : undefined);\n}","map":{"version":3,"names":["InstantSearch","useCallback","useRef","version","ReactVersion","useSyncExternalStore","useInstantSearchServerContext","useInstantSearchSSRContext","useForceUpdate","warn","defaultUserAgents","concat","serverUserAgent","nextUserAgent","nextVersion","useInstantSearchApi","props","forceUpdate","serverContext","serverState","initialResults","prevPropsRef","searchRef","ssrSearchRef","current","search","_schedule","cb","queue","push","clearTimeout","timer","setTimeout","forEach","callback","_initialResults","addAlgoliaAgents","searchClient","getNextVersion","start","notifyServer","warnNextRouter","routing","_search","prevProps","indexName","helper","setIndex","process","env","NODE_ENV","mainHelper","setClient","onStateChange","searchFunction","_searchFunction","stalledSearchDelay","_props$stalledSearchD","_stalledSearchDelay","cleanupTimerRef","store","started","_preventWidgetCleanup","cleanup","dispose","userAgents","addAlgoliaAgent","filter","Boolean","userAgent","_routing$router","window","isUsingNextRouter","router","_isNextRouter","_next","_process$env","next","NEXT_RUNTIME","undefined"],"sources":["/Users/renat.ishmukhamedov/Documents/dev_projects/extractor/frontend/node_modules/react-instantsearch-hooks/dist/es/lib/useInstantSearchApi.js"],"sourcesContent":["import InstantSearch from \"instantsearch.js/es/lib/InstantSearch.js\";\nimport { useCallback, useRef, version as ReactVersion } from 'react';\nimport { useSyncExternalStore } from \"use-sync-external-store/shim/index.js\";\nimport { useInstantSearchServerContext } from \"./useInstantSearchServerContext.js\";\nimport { useInstantSearchSSRContext } from \"./useInstantSearchSSRContext.js\";\nimport version from \"../version.js\";\nimport { useForceUpdate } from \"./useForceUpdate.js\";\nimport { warn } from \"./warn.js\";\nvar defaultUserAgents = [\"react (\".concat(ReactVersion, \")\"), \"react-instantsearch (\".concat(version, \")\"), \"react-instantsearch-hooks (\".concat(version, \")\")];\nvar serverUserAgent = \"react-instantsearch-server (\".concat(version, \")\");\nvar nextUserAgent = function nextUserAgent(nextVersion) {\n  return nextVersion ? \"next.js (\".concat(nextVersion, \")\") : null;\n};\nexport function useInstantSearchApi(props) {\n  var forceUpdate = useForceUpdate();\n  var serverContext = useInstantSearchServerContext();\n  var serverState = useInstantSearchSSRContext();\n  var initialResults = serverState === null || serverState === void 0 ? void 0 : serverState.initialResults;\n  var prevPropsRef = useRef(props);\n  var searchRef = useRef(null);\n  // As we need to render on mount with SSR, using the local ref above in `StrictMode` will\n  // create and start two instances of InstantSearch. To avoid this, we instead discard it and use\n  // an upward ref from `InstantSearchSSRContext` as it has already been mounted a second time at this point.\n  if (serverState) {\n    searchRef = serverState.ssrSearchRef;\n  }\n  if (searchRef.current === null) {\n    // We don't use the `instantsearch()` function because it comes with other\n    // top-level APIs that we don't need.\n    // See https://github.com/algolia/instantsearch.js/blob/5b529f43d8acc680f85837eaaa41f7fd03a3f833/src/index.es.ts#L63-L86\n    var search = new InstantSearch(props);\n    search._schedule = function _schedule(cb) {\n      search._schedule.queue.push(cb);\n      clearTimeout(search._schedule.timer);\n      search._schedule.timer = setTimeout(function () {\n        search._schedule.queue.forEach(function (callback) {\n          callback();\n        });\n        search._schedule.queue = [];\n      }, 0);\n    };\n    search._schedule.queue = [];\n    if (serverContext || initialResults) {\n      // InstantSearch.js has a private Initial Results API that lets us inject\n      // results on the search instance.\n      // On the server, we default the initial results to an empty object so that\n      // InstantSearch.js doesn't schedule a search that isn't used, leading to\n      // an additional network request. (This is equivalent to monkey-patching\n      // `scheduleSearch` to a noop.)\n      search._initialResults = initialResults || {};\n    }\n    addAlgoliaAgents(props.searchClient, [].concat(defaultUserAgents, [serverContext && serverUserAgent, nextUserAgent(getNextVersion())]));\n\n    // On the server, we start the search early to compute the search parameters.\n    // On SSR, we start the search early to directly catch up with the lifecycle\n    // and render.\n    if (serverContext || initialResults) {\n      search.start();\n    }\n    if (serverContext) {\n      // We notify `getServerState()` of the InstantSearch internals to retrieve\n      // the server state and pass it to the render on SSR.\n      serverContext.notifyServer({\n        search: search\n      });\n    }\n    warnNextRouter(props.routing);\n    searchRef.current = search;\n  }\n  {\n    var _search = searchRef.current;\n    var prevProps = prevPropsRef.current;\n    if (prevProps.indexName !== props.indexName) {\n      _search.helper.setIndex(props.indexName || '').search();\n      prevPropsRef.current = props;\n    }\n    if (prevProps.searchClient !== props.searchClient) {\n      process.env.NODE_ENV === 'development' ? warn(false, 'The `searchClient` prop of `<InstantSearch>` changed between renders, which may cause more search requests than necessary. If this is an unwanted behavior, please provide a stable reference: https://www.algolia.com/doc/api-reference/widgets/instantsearch/react-hooks/#widget-param-searchclient') : void 0;\n      addAlgoliaAgents(props.searchClient, [].concat(defaultUserAgents, [serverContext && serverUserAgent]));\n      _search.mainHelper.setClient(props.searchClient).search();\n      prevPropsRef.current = props;\n    }\n    if (prevProps.onStateChange !== props.onStateChange) {\n      _search.onStateChange = props.onStateChange;\n      prevPropsRef.current = props;\n    }\n    if (prevProps.searchFunction !== props.searchFunction) {\n      // Updating the `searchFunction` to `undefined` is not supported by\n      // InstantSearch.js, so it will throw an error.\n      // This is a fair behavior until we add an update API in InstantSearch.js.\n      _search._searchFunction = props.searchFunction;\n      prevPropsRef.current = props;\n    }\n    if (prevProps.stalledSearchDelay !== props.stalledSearchDelay) {\n      var _props$stalledSearchD;\n      // The default `stalledSearchDelay` in InstantSearch.js is 200ms.\n      // We need to reset it when it's undefined to get back to the original value.\n      _search._stalledSearchDelay = (_props$stalledSearchD = props.stalledSearchDelay) !== null && _props$stalledSearchD !== void 0 ? _props$stalledSearchD : 200;\n      prevPropsRef.current = props;\n    }\n\n    // Updating the `routing` prop is not supported because InstantSearch.js\n    // doesn't let us change it. This might not be a problem though, because `routing`\n    // shouldn't need to be dynamic.\n    // If we find scenarios where `routing` needs to change, we can always expose\n    // it privately on the InstantSearch instance. Another way would be to\n    // manually inject the routing middleware in this library, and not rely\n    // on the provided `routing` prop.\n  }\n\n  var cleanupTimerRef = useRef(null);\n  var store = useSyncExternalStore(useCallback(function () {\n    var search = searchRef.current;\n\n    // Scenario 1: the component mounts.\n    if (cleanupTimerRef.current === null) {\n      // On SSR, the instance is already started so we don't start it again.\n      if (!search.started) {\n        search.start();\n        forceUpdate();\n      }\n    }\n    // Scenario 2: the component updates.\n    else {\n      // We cancel the previous cleanup function because we don't want to\n      // dispose the search during an update.\n      clearTimeout(cleanupTimerRef.current);\n      search._preventWidgetCleanup = false;\n    }\n    return function () {\n      function cleanup() {\n        search.dispose();\n      }\n      clearTimeout(search._schedule.timer);\n      // We clean up only when the component that uses this subscription unmounts,\n      // but not when it updates, because it would dispose the instance, which\n      // would remove all the widgets and break routing.\n      // Executing the cleanup function in a `setTimeout()` lets us cancel it\n      // in the next effect.\n      // (There might be better ways to do this.)\n      cleanupTimerRef.current = setTimeout(cleanup);\n\n      // We need to prevent the `useWidget` cleanup function so that widgets\n      // are not removed before the instance is disposed, triggering\n      // an unwanted search request.\n      search._preventWidgetCleanup = true;\n    };\n  }, [forceUpdate]), function () {\n    return searchRef.current;\n  }, function () {\n    return searchRef.current;\n  });\n  return store;\n}\nfunction addAlgoliaAgents(searchClient, userAgents) {\n  if (typeof searchClient.addAlgoliaAgent !== 'function') {\n    return;\n  }\n  userAgents.filter(Boolean).forEach(function (userAgent) {\n    searchClient.addAlgoliaAgent(userAgent);\n  });\n}\nfunction warnNextRouter(routing) {\n  if (process.env.NODE_ENV === 'development') {\n    var _routing$router;\n    if (!routing || typeof window === 'undefined' || !('__NEXT_DATA__' in window)) {\n      return;\n    }\n    var isUsingNextRouter =\n    // @ts-expect-error: _isNextRouter is only set on the Next.js router\n    routing !== true && (routing === null || routing === void 0 ? void 0 : (_routing$router = routing.router) === null || _routing$router === void 0 ? void 0 : _routing$router._isNextRouter);\n    process.env.NODE_ENV === 'development' ? warn(isUsingNextRouter, \"\\nYou are using Next.js with InstantSearch without the \\\"react-instantsearch-hooks-router-nextjs\\\" package.\\nThis package is recommended to make the routing work correctly with Next.js.\\nPlease check its usage instructions: https://github.com/algolia/instantsearch/tree/master/packages/react-instantsearch-hooks-router-nextjs\\n\\nYou can ignore this warning if you are using a custom router that suits your needs, it won't be outputted in production builds.\") : void 0;\n  }\n}\n\n/**\n * Gets the version of Next.js if it is available in the `window` object,\n * otherwise it returns the NEXT_RUNTIME environment variable (in SSR),\n * which is either `nodejs` or `edge`.\n */\nfunction getNextVersion() {\n  var _next, _process$env;\n  return typeof window !== 'undefined' && ((_next = window.next) === null || _next === void 0 ? void 0 : _next.version) || (typeof process !== 'undefined' ? (_process$env = process.env) === null || _process$env === void 0 ? void 0 : _process$env.NEXT_RUNTIME : undefined);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}