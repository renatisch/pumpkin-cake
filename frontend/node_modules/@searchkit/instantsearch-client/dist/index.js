// src/index.ts
function isSearchkit(config) {
  return config.handleInstantSearchRequests !== void 0;
}
var InstantSearchElasticsearchAdapter = class {
  constructor(config, requestOptions) {
    this.config = config;
    this.requestOptions = requestOptions;
    this.cache = {};
    this.transporter = {
      headers: {},
      queryParameters: {}
    };
    if (!isSearchkit(this.config) && !this.config.url) {
      throw new Error("Searchkit Instantsearch Client: url is required");
    }
    if (!isSearchkit(this.config) && this.requestOptions) {
      throw new Error(
        "Searchkit Instantsearch Client: requestOptions is not supported when used with url. Add the request options to @searchkit/api instead."
      );
    }
  }
  clearCache() {
    this.cache = {};
    return Promise.resolve(void 0);
  }
  getHeaders() {
    let headers = {};
    if (!isSearchkit(this.config) && this.config.headers) {
      headers = typeof this.config.headers === "function" ? this.config.headers() : this.config.headers;
    }
    return headers;
  }
  async search(instantsearchRequests) {
    try {
      const key = JSON.stringify(instantsearchRequests);
      if (this.cache[key]) {
        return this.cache[key];
      }
      if (isSearchkit(this.config)) {
        const results2 = await this.config.handleInstantSearchRequests(
          instantsearchRequests,
          this.requestOptions
        );
        this.cache[key] = results2;
        return results2;
      }
      const response = await fetch(this.config.url, {
        body: JSON.stringify(instantsearchRequests),
        headers: {
          "Content-Type": "application/json",
          ...this.getHeaders()
        },
        method: "POST"
      });
      const results = await response.json();
      this.cache[key] = results;
      return results;
    } catch (e) {
      console.error(e);
      return [];
    }
  }
  async searchForFacetValues(instantsearchRequests) {
    const isr = instantsearchRequests.map((request) => {
      return {
        ...request,
        params: {
          ...request.params,
          hitsPerPage: 0
        }
      };
    });
    try {
      if (isSearchkit(this.config)) {
        const results2 = await this.config.handleInstantSearchRequests(isr);
        return results2.results;
      }
      const response = await fetch(this.config.url, {
        body: JSON.stringify(isr),
        headers: {
          "Content-Type": "application/json",
          ...this.getHeaders()
        },
        method: "POST"
      });
      const results = await response.json();
      return results.results;
    } catch (e) {
      console.error(e);
      return [];
    }
  }
};
var createClient = (config, requestOptions) => new InstantSearchElasticsearchAdapter(config, requestOptions);
var src_default = createClient;
export {
  src_default as default
};
//# sourceMappingURL=index.js.map