{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import type { MultipleQueriesQuery, RequestOptions } from 'searchkit'\nimport type Searchkit from 'searchkit'\n\ninterface InstantSearchElasticsearchAdapterConfig {\n  url: string\n  headers?: Record<string, string> | (() => Record<string, string>)\n}\n\ntype Config = InstantSearchElasticsearchAdapterConfig | Searchkit\n\nfunction isSearchkit(config: Config): config is Searchkit {\n  return (config as Searchkit).handleInstantSearchRequests !== undefined\n}\n\nclass InstantSearchElasticsearchAdapter {\n  private cache: Record<string, any> = {}\n  public transporter = {\n    headers: {},\n    queryParameters: {}\n  }\n\n  constructor(private config: Config, private requestOptions?: RequestOptions) {\n    if (!isSearchkit(this.config) && !this.config.url) {\n      throw new Error('Searchkit Instantsearch Client: url is required')\n    }\n    if (!isSearchkit(this.config) && this.requestOptions) {\n      throw new Error(\n        'Searchkit Instantsearch Client: requestOptions is not supported when used with url. Add the request options to @searchkit/api instead.'\n      )\n    }\n  }\n\n  public clearCache(): Promise<void> {\n    this.cache = {}\n    return Promise.resolve(undefined)\n  }\n\n  private getHeaders(): Record<string, string> {\n    let headers = {}\n    if (!isSearchkit(this.config) && this.config.headers) {\n      headers =\n        typeof this.config.headers === 'function' ? this.config.headers() : this.config.headers\n    }\n    return headers\n  }\n\n  public async search(instantsearchRequests: readonly MultipleQueriesQuery[]): Promise<any> {\n    try {\n      const key = JSON.stringify(instantsearchRequests)\n      if (this.cache[key]) {\n        return this.cache[key]\n      }\n\n      if (isSearchkit(this.config)) {\n        const results = await this.config.handleInstantSearchRequests(\n          instantsearchRequests,\n          this.requestOptions\n        )\n        this.cache[key] = results\n        return results\n      }\n\n      const response = await fetch(this.config.url, {\n        body: JSON.stringify(instantsearchRequests),\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.getHeaders()\n        },\n        method: 'POST'\n      })\n\n      const results = await response.json()\n      this.cache[key] = results\n      return results\n    } catch (e) {\n      console.error(e)\n      return []\n    }\n  }\n\n  public async searchForFacetValues(\n    instantsearchRequests: readonly MultipleQueriesQuery[]\n  ): Promise<any> {\n    const isr = instantsearchRequests.map<MultipleQueriesQuery>((request) => {\n      return {\n        ...request,\n        params: {\n          ...request.params,\n          hitsPerPage: 0\n        }\n      }\n    })\n\n    try {\n      if (isSearchkit(this.config)) {\n        const results = await this.config.handleInstantSearchRequests(isr)\n        return results.results\n      }\n\n      const response = await fetch(this.config.url, {\n        body: JSON.stringify(isr),\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.getHeaders()\n        },\n        method: 'POST'\n      })\n\n      const results = await response.json()\n      return results.results\n    } catch (e) {\n      console.error(e)\n      return []\n    }\n  }\n}\n\nconst createClient = (config: Config, requestOptions?: RequestOptions) =>\n  new InstantSearchElasticsearchAdapter(config, requestOptions)\n\nexport default createClient\n"],"mappings":"udAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAUA,SAASC,EAAYC,EAAqC,CACxD,OAAQA,EAAqB,8BAAgC,MAC/D,CAEA,IAAMC,EAAN,KAAwC,CAOtC,YAAoBD,EAAwBE,EAAiC,CAAzD,YAAAF,EAAwB,oBAAAE,EAN5C,KAAQ,MAA6B,CAAC,EACtC,KAAO,YAAc,CACnB,QAAS,CAAC,EACV,gBAAiB,CAAC,CACpB,EAGE,GAAI,CAACH,EAAY,KAAK,MAAM,GAAK,CAAC,KAAK,OAAO,IAC5C,MAAM,IAAI,MAAM,iDAAiD,EAEnE,GAAI,CAACA,EAAY,KAAK,MAAM,GAAK,KAAK,eACpC,MAAM,IAAI,MACR,wIACF,CAEJ,CAEO,YAA4B,CACjC,YAAK,MAAQ,CAAC,EACP,QAAQ,QAAQ,MAAS,CAClC,CAEQ,YAAqC,CAC3C,IAAII,EAAU,CAAC,EACf,MAAI,CAACJ,EAAY,KAAK,MAAM,GAAK,KAAK,OAAO,UAC3CI,EACE,OAAO,KAAK,OAAO,SAAY,WAAa,KAAK,OAAO,QAAQ,EAAI,KAAK,OAAO,SAE7EA,CACT,CAEA,MAAa,OAAOC,EAAsE,CACxF,GAAI,CACF,IAAMC,EAAM,KAAK,UAAUD,CAAqB,EAChD,GAAI,KAAK,MAAMC,GACb,OAAO,KAAK,MAAMA,GAGpB,GAAIN,EAAY,KAAK,MAAM,EAAG,CAC5B,IAAMO,EAAU,MAAM,KAAK,OAAO,4BAChCF,EACA,KAAK,cACP,EACA,YAAK,MAAMC,GAAOC,EACXA,CACT,CAWA,IAAMA,EAAU,MATC,MAAM,MAAM,KAAK,OAAO,IAAK,CAC5C,KAAM,KAAK,UAAUF,CAAqB,EAC1C,QAAS,CACP,eAAgB,mBAChB,GAAG,KAAK,WAAW,CACrB,EACA,OAAQ,MACV,CAAC,GAE8B,KAAK,EACpC,YAAK,MAAMC,GAAOC,EACXA,CACT,OAASC,EAAP,CACA,eAAQ,MAAMA,CAAC,EACR,CAAC,CACV,CACF,CAEA,MAAa,qBACXH,EACc,CACd,IAAMI,EAAMJ,EAAsB,IAA2BK,IACpD,CACL,GAAGA,EACH,OAAQ,CACN,GAAGA,EAAQ,OACX,YAAa,CACf,CACF,EACD,EAED,GAAI,CACF,OAAIV,EAAY,KAAK,MAAM,GACT,MAAM,KAAK,OAAO,4BAA4BS,CAAG,GAClD,SAYD,MATC,MAAM,MAAM,KAAK,OAAO,IAAK,CAC5C,KAAM,KAAK,UAAUA,CAAG,EACxB,QAAS,CACP,eAAgB,mBAChB,GAAG,KAAK,WAAW,CACrB,EACA,OAAQ,MACV,CAAC,GAE8B,KAAK,GACrB,OACjB,OAASD,EAAP,CACA,eAAQ,MAAMA,CAAC,EACR,CAAC,CACV,CACF,CACF,EAEMG,EAAe,CAACV,EAAgBE,IACpC,IAAID,EAAkCD,EAAQE,CAAc,EAEvDJ,EAAQY","names":["src_exports","__export","src_default","isSearchkit","config","InstantSearchElasticsearchAdapter","requestOptions","headers","instantsearchRequests","key","results","e","isr","request","createClient"]}