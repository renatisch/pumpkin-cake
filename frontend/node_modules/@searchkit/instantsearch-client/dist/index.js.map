{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { MultipleQueriesQuery, RequestOptions } from 'searchkit'\nimport type Searchkit from 'searchkit'\n\ninterface InstantSearchElasticsearchAdapterConfig {\n  url: string\n  headers?: Record<string, string> | (() => Record<string, string>)\n}\n\ntype Config = InstantSearchElasticsearchAdapterConfig | Searchkit\n\nfunction isSearchkit(config: Config): config is Searchkit {\n  return (config as Searchkit).handleInstantSearchRequests !== undefined\n}\n\nclass InstantSearchElasticsearchAdapter {\n  private cache: Record<string, any> = {}\n  public transporter = {\n    headers: {},\n    queryParameters: {}\n  }\n\n  constructor(private config: Config, private requestOptions?: RequestOptions) {\n    if (!isSearchkit(this.config) && !this.config.url) {\n      throw new Error('Searchkit Instantsearch Client: url is required')\n    }\n    if (!isSearchkit(this.config) && this.requestOptions) {\n      throw new Error(\n        'Searchkit Instantsearch Client: requestOptions is not supported when used with url. Add the request options to @searchkit/api instead.'\n      )\n    }\n  }\n\n  public clearCache(): Promise<void> {\n    this.cache = {}\n    return Promise.resolve(undefined)\n  }\n\n  private getHeaders(): Record<string, string> {\n    let headers = {}\n    if (!isSearchkit(this.config) && this.config.headers) {\n      headers =\n        typeof this.config.headers === 'function' ? this.config.headers() : this.config.headers\n    }\n    return headers\n  }\n\n  public async search(instantsearchRequests: readonly MultipleQueriesQuery[]): Promise<any> {\n    try {\n      const key = JSON.stringify(instantsearchRequests)\n      if (this.cache[key]) {\n        return this.cache[key]\n      }\n\n      if (isSearchkit(this.config)) {\n        const results = await this.config.handleInstantSearchRequests(\n          instantsearchRequests,\n          this.requestOptions\n        )\n        this.cache[key] = results\n        return results\n      }\n\n      const response = await fetch(this.config.url, {\n        body: JSON.stringify(instantsearchRequests),\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.getHeaders()\n        },\n        method: 'POST'\n      })\n\n      const results = await response.json()\n      this.cache[key] = results\n      return results\n    } catch (e) {\n      console.error(e)\n      return []\n    }\n  }\n\n  public async searchForFacetValues(\n    instantsearchRequests: readonly MultipleQueriesQuery[]\n  ): Promise<any> {\n    const isr = instantsearchRequests.map<MultipleQueriesQuery>((request) => {\n      return {\n        ...request,\n        params: {\n          ...request.params,\n          hitsPerPage: 0\n        }\n      }\n    })\n\n    try {\n      if (isSearchkit(this.config)) {\n        const results = await this.config.handleInstantSearchRequests(isr)\n        return results.results\n      }\n\n      const response = await fetch(this.config.url, {\n        body: JSON.stringify(isr),\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.getHeaders()\n        },\n        method: 'POST'\n      })\n\n      const results = await response.json()\n      return results.results\n    } catch (e) {\n      console.error(e)\n      return []\n    }\n  }\n}\n\nconst createClient = (config: Config, requestOptions?: RequestOptions) =>\n  new InstantSearchElasticsearchAdapter(config, requestOptions)\n\nexport default createClient\n"],"mappings":";AAUA,SAAS,YAAY,QAAqC;AACxD,SAAQ,OAAqB,gCAAgC;AAC/D;AAEA,IAAM,oCAAN,MAAwC;AAAA,EAOtC,YAAoB,QAAwB,gBAAiC;AAAzD;AAAwB;AAN5C,SAAQ,QAA6B,CAAC;AACtC,SAAO,cAAc;AAAA,MACnB,SAAS,CAAC;AAAA,MACV,iBAAiB,CAAC;AAAA,IACpB;AAGE,QAAI,CAAC,YAAY,KAAK,MAAM,KAAK,CAAC,KAAK,OAAO,KAAK;AACjD,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AACA,QAAI,CAAC,YAAY,KAAK,MAAM,KAAK,KAAK,gBAAgB;AACpD,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEO,aAA4B;AACjC,SAAK,QAAQ,CAAC;AACd,WAAO,QAAQ,QAAQ,MAAS;AAAA,EAClC;AAAA,EAEQ,aAAqC;AAC3C,QAAI,UAAU,CAAC;AACf,QAAI,CAAC,YAAY,KAAK,MAAM,KAAK,KAAK,OAAO,SAAS;AACpD,gBACE,OAAO,KAAK,OAAO,YAAY,aAAa,KAAK,OAAO,QAAQ,IAAI,KAAK,OAAO;AAAA,IACpF;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,OAAO,uBAAsE;AACxF,QAAI;AACF,YAAM,MAAM,KAAK,UAAU,qBAAqB;AAChD,UAAI,KAAK,MAAM,MAAM;AACnB,eAAO,KAAK,MAAM;AAAA,MACpB;AAEA,UAAI,YAAY,KAAK,MAAM,GAAG;AAC5B,cAAMA,WAAU,MAAM,KAAK,OAAO;AAAA,UAChC;AAAA,UACA,KAAK;AAAA,QACP;AACA,aAAK,MAAM,OAAOA;AAClB,eAAOA;AAAA,MACT;AAEA,YAAM,WAAW,MAAM,MAAM,KAAK,OAAO,KAAK;AAAA,QAC5C,MAAM,KAAK,UAAU,qBAAqB;AAAA,QAC1C,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,GAAG,KAAK,WAAW;AAAA,QACrB;AAAA,QACA,QAAQ;AAAA,MACV,CAAC;AAED,YAAM,UAAU,MAAM,SAAS,KAAK;AACpC,WAAK,MAAM,OAAO;AAClB,aAAO;AAAA,IACT,SAAS,GAAP;AACA,cAAQ,MAAM,CAAC;AACf,aAAO,CAAC;AAAA,IACV;AAAA,EACF;AAAA,EAEA,MAAa,qBACX,uBACc;AACd,UAAM,MAAM,sBAAsB,IAA0B,CAAC,YAAY;AACvE,aAAO;AAAA,QACL,GAAG;AAAA,QACH,QAAQ;AAAA,UACN,GAAG,QAAQ;AAAA,UACX,aAAa;AAAA,QACf;AAAA,MACF;AAAA,IACF,CAAC;AAED,QAAI;AACF,UAAI,YAAY,KAAK,MAAM,GAAG;AAC5B,cAAMA,WAAU,MAAM,KAAK,OAAO,4BAA4B,GAAG;AACjE,eAAOA,SAAQ;AAAA,MACjB;AAEA,YAAM,WAAW,MAAM,MAAM,KAAK,OAAO,KAAK;AAAA,QAC5C,MAAM,KAAK,UAAU,GAAG;AAAA,QACxB,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,GAAG,KAAK,WAAW;AAAA,QACrB;AAAA,QACA,QAAQ;AAAA,MACV,CAAC;AAED,YAAM,UAAU,MAAM,SAAS,KAAK;AACpC,aAAO,QAAQ;AAAA,IACjB,SAAS,GAAP;AACA,cAAQ,MAAM,CAAC;AACf,aAAO,CAAC;AAAA,IACV;AAAA,EACF;AACF;AAEA,IAAM,eAAe,CAAC,QAAgB,mBACpC,IAAI,kCAAkC,QAAQ,cAAc;AAE9D,IAAO,cAAQ;","names":["results"]}